---
description: 
globs: **/RichTextEditor.svelte,**/tiptap-presets.ts
alwaysApply: false
---
# Tiptap Rich Text Editor Integration

This document outlines the strategy for integrating the Tiptap rich text editor into the SvelteKit application.

## Core Strategy

1.  **Shared Presets:** Tiptap editor configurations, known as "presets," are defined in a shared location to be accessible by both client-side components and server-side validation logic. This ensures consistency in allowed extensions and their configurations.
    -   **Location:** `[apps/site/src/lib/shared/tiptap-presets.ts](mdc:apps/site/src/lib/shared/tiptap-presets.ts)`
    -   **Structure:**
        -   `TipTapPresetKind`: A type union for preset names (e.g., `"comment"`).
        -   `TipTapPreset`: An interface defining the structure of a preset, primarily an array of Tiptap `AnyExtension[]`.
        -   `tipTapPresets`: A `Record<TipTapPresetKind, TipTapPreset>` storing the actual preset configurations.
        -   `getPresetExtensions(kind: TipTapPresetKind)`: A helper function to retrieve extensions for a given preset.
    -   **Initial Preset (`comment`):**
        -   **Nodes:** `Document`, `Paragraph`, `Text`, `Blockquote`, `BulletList`, `OrderedList`, `ListItem`, `CodeBlock`.
        -   **Marks:** `Bold`, `Italic`, `Code` (inline), `Link` (configured with `rel: 'nofollow ugc'`, `target: '_blank'`, `openOnClick: false`, `autolink: true`, `linkOnPaste: true`), `Subscript`, `Superscript`, `TextStyle`.
        -   `StarterKit` is intentionally avoided for granular control over extensions.

2.  **Reusable Svelte Component:**
    -   **Location:** `[apps/site/src/lib/components/RichTextEditor.svelte](mdc:apps/site/src/lib/components/RichTextEditor.svelte)`
    -   **Props (Svelte 4 style):**
        -   `export let mode: TipTapPresetKind;` (Required)
        -   `export let content: Content = "";` (Bindable: HTML string, can be initialized with HTML or Tiptap JSON)
        -   `export let json: Record<string, any> | undefined = undefined;` (Bindable: ProseMirror JSON object)
    -   **Implementation Details:**
        -   Uses Tiptap core directly (`@tiptap/core`, `@tiptap/extension-*`).
        -   Manages editor state internally using Svelte's `onMount` and `onDestroy`.
        -   Updates bound `content` (HTML) and `json` (ProseMirror JSON) props in `onUpdate` and `onMount`.
        -   Provides a toolbar with buttons for enabled extensions, including a dropdown for block types (Normal, Code Block, Quote).
        -   Includes a tabbed view to switch between the live editor and an HTML source view.
    -   **Styling:** Leverages Tailwind CSS. Component-specific styles are within the `<style>` block. The `tiptap-prose-editor-wrapper` class can be used for targeting the editor area.

3.  **Server-Side Validation:**
    -   **Recommended Approach:** Submit the ProseMirror JSON content (from the `json` prop) to the server.
    -   **Reusable Utility:** A dedicated validation function is available:
        -   **Location:** `[apps/site/src/lib/server/utils/tiptap-validation.ts](mdc:apps/site/src/lib/server/utils/tiptap-validation.ts)`
        -   **Function:** `validateTiptapJson(tiptapJson: Record<string, unknown>, presetKind: TipTapPresetKind): TipTapValidationResult`
        -   **`TipTapValidationResult`:** An object `{ isValid: boolean; validatedJson?: Record<string, unknown>; error?: string; details?: string; }`
    -   **Mechanism:**
        1.  The server action receives the stringified ProseMirror JSON.
        2.  It parses the JSON string into an object.
        3.  It calls `validateTiptapJson(parsedJson, presetKind)`.
        4.  If `validationResult.isValid` is true, `validationResult.validatedJson` contains the sanitized and validated ProseMirror JSON, which is safe to store.
        5.  If `isValid` is false, `validationResult.error` and `validationResult.details` provide information about the validation failure.
    -   **Example Implementation:** See `[+page.server.ts](mdc:apps/site/src/routes/dev/editor-test/+page.server.ts)`.
    -   **Goal:** Ensure that only content conforming to the defined presets (and thus the schema) can be saved.

## Key Libraries & Extensions (Client & Server)

-   `@tiptap/core`
-   `@tiptap/extension-document`
-   `@tiptap/extension-paragraph`
-   `@tiptap/extension-text`
-   `@tiptap/extension-blockquote`
-   `@tiptap/extension-bullet-list`
-   `@tiptap/extension-ordered-list`
-   `@tiptap/extension-list-item`
-   `@tiptap/extension-code-block`
-   `@tiptap/extension-bold`
-   `@tiptap/extension-italic`
-   `@tiptap/extension-code` (inline)
-   `@tiptap/extension-link`
-   `@tiptap/extension-subscript`
-   `@tiptap/extension-superscript`
-   `@tiptap/extension-text-style`
-   `prosemirror-model` (Used by `validateTiptapJson` on the server)

This rule file provides an updated overview of the Tiptap integration approach.
