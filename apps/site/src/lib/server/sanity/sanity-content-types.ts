/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type PodcastShowEpisode = {
  _id: string;
  _type: "podcastShowEpisode";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  show: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "podcast";
  };
  ordering?: {
    season: number;
    episode: number;
  };
  title: string;
  stages?: Stages;
  date: string;
  description: string;
  episodeArtRaw: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  segments: Array<
    | {
        segmentName: string;
        audio?: {
          clip: {
            _ref: string;
            _type: "reference";
            _weak?: boolean;
            [internalGroqTypeReferenceTo]?: "podcastAudioClip";
          };
          start?: number;
          end?: number;
        };
        skipAsChapter?: boolean;
        isAd: boolean;
        includeInPreview: boolean;
        _type: "podcastShowSegment";
        _key: string;
      }
    | {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        _key: string;
        [internalGroqTypeReferenceTo]?: "podcastShowSegment";
      }
  >;
};

export type PodcastShowSegment = {
  _id: string;
  _type: "podcastShowSegment";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  segmentName: string;
  audio?: {
    clip: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "podcastAudioClip";
    };
    start?: number;
    end?: number;
  };
  skipAsChapter?: boolean;
  isAd: boolean;
  includeInPreview: boolean;
};

export type PodcastAudioClip = {
  _id: string;
  _type: "podcastAudioClip";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title: string;
  clip: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    media?: unknown;
    _type: "file";
  };
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type PodcastFeed = {
  _id: string;
  _type: "podcastFeed";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  name: string;
  podcast: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "podcast";
  };
  feedType: "standard" | "premium" | "preview";
  description?: string;
};

export type Podcast = {
  _id: string;
  _type: "podcast";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  title: string;
  stages?: Stages;
  description: string;
  iTunesDescription: string;
  usesSeasons: boolean;
  isComplete: boolean;
  explicit: "yes" | "no" | "clean";
  accentColor: Color;
  iTunesCategories: Array<{
    category: string;
    subCategory?: string;
    _key: string;
  }>;
  iTunesType: "serial" | "episodic";
};

export type CodeBlock = {
  _type: "codeBlock";
  code: Code;
};

export type YoutubeEmbed = {
  _type: "youtubeEmbed";
  title?: string;
  youtubeId: string;
};

export type Divider = {
  _type: "divider";
  title?: string;
};

export type ImageWithAlt = {
  _type: "imageWithAlt";
  image: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  altText: string;
  caption?: string;
  attribution?: string;
};

export type BlockQuote = {
  _type: "blockQuote";
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "centered";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  speaker?: string;
  work?: string;
  citeHref?: string;
};

export type Epigraph = {
  _type: "epigraph";
  body?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "centered";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  speaker?: string;
  work?: string;
  citeHref?: string;
};

export type LongFormBlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h2" | "h3" | "centered";
      listItem?: "bullet" | "number";
      markDefs?: Array<
        | {
            href?: string;
            _type: "link";
            _key: string;
          }
        | {
            markdown?: string;
            _type: "sidenote";
            _key: string;
          }
      >;
      level?: number;
      _type: "block";
      _key: string;
    }
  | ({
      _key: string;
    } & ImageWithAlt)
  | ({
      _key: string;
    } & BlockQuote)
  | ({
      _key: string;
    } & Epigraph)
  | ({
      _key: string;
    } & Divider)
  | ({
      _key: string;
    } & CodeBlock)
  | ({
      _key: string;
    } & YoutubeEmbed)
>;

export type SimpleContent = Array<{
  children?: Array<{
    marks?: Array<string>;
    text?: string;
    _type: "span";
    _key: string;
  }>;
  style?: "normal" | "centered";
  listItem?: "bullet" | "number";
  markDefs?: Array<{
    href?: string;
    _type: "link";
    _key: string;
  }>;
  level?: number;
  _type: "block";
  _key: string;
}>;

export type BlogTag = {
  _id: string;
  _type: "blogTag";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  description?: string;
};

export type BlogPost = {
  _id: string;
  _type: "blogPost";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  title: string;
  blurb: string;
  stages?: Stages;
  date: string;
  author: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "author";
  };
  category: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "blogCategory";
  };
  tags?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "blogTag";
  }>;
  body: LongFormBlockContent;
};

export type BlogCategory = {
  _id: string;
  _type: "blogCategory";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  description: string;
};

export type Stages = {
  _type: "stages";
  development?: boolean;
  production?: boolean;
};

export type Author = {
  _id: string;
  _type: "author";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  slug: Slug;
  fullName: string;
  shortName: string;
  avatar: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  email: string;
  url: string;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Slug = {
  _type: "slug";
  current: string;
  source?: string;
};

export type Code = {
  _type: "code";
  language?: string;
  filename?: string;
  code?: string;
  highlightedLines?: Array<number>;
};

export type Color = {
  _type: "color";
  hex?: string;
  alpha?: number;
  hsl?: HslaColor;
  hsv?: HsvaColor;
  rgb?: RgbaColor;
};

export type RgbaColor = {
  _type: "rgbaColor";
  r?: number;
  g?: number;
  b?: number;
  a?: number;
};

export type HsvaColor = {
  _type: "hsvaColor";
  h?: number;
  s?: number;
  v?: number;
  a?: number;
};

export type HslaColor = {
  _type: "hslaColor";
  h?: number;
  s?: number;
  l?: number;
  a?: number;
};

export type AllSanitySchemaTypes =
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | Geopoint
  | PodcastShowEpisode
  | PodcastShowSegment
  | PodcastAudioClip
  | SanityFileAsset
  | PodcastFeed
  | Podcast
  | CodeBlock
  | YoutubeEmbed
  | Divider
  | ImageWithAlt
  | BlockQuote
  | Epigraph
  | LongFormBlockContent
  | SimpleContent
  | BlogTag
  | BlogPost
  | BlogCategory
  | Stages
  | Author
  | SanityImageCrop
  | SanityImageHotspot
  | SanityImageAsset
  | SanityAssetSourceData
  | SanityImageMetadata
  | Slug
  | Code
  | Color
  | RgbaColor
  | HsvaColor
  | HslaColor;
export declare const internalGroqTypeReferenceTo: unique symbol;
